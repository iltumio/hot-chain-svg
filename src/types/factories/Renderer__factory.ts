/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Renderer, RendererInterface } from "../Renderer";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "example",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "render",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a60806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806354353f2f1461003b578063c321118c14610059575b600080fd5b61004361006c565b604051610050919061062d565b60405180910390f35b610043610067366004610660565b61007d565b6060610078600161007d565b905090565b60606102386100bf604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b8152506103f4565b6100fc604051806040016040528060018152602001607960f81b81525060405180604001604052806002815260200161034360f41b8152506103f4565b6101556040518060400160405280600981526020017f666f6e742d73697a65000000000000000000000000000000000000000000000081525060405180604001604052806002815260200161191960f11b8152506103f4565b6101b060405180604001604052806004815260200163199a5b1b60e21b8152506040518060400160405280600581526020017f77686974650000000000000000000000000000000000000000000000000000008152506103f4565b6040516020016101c39493929190610679565b60408051601f19818403018152828201909152600e82527f48656c6c6f2c20746f6b656e202300000000000000000000000000000000000060208301529061020a90610420565b61021385610433565b6040516020016102249291906106d0565b604051602081830303815290604052610577565b6103cd61029660405180604001604052806004815260200163199a5b1b60e21b8152506040518060400160405280600681526020017f707572706c6500000000000000000000000000000000000000000000000000008152506103f4565b6102d3604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b8152506103f4565b610310604051806040016040528060018152602001607960f81b81525060405180604001604052806002815260200161035360f41b8152506103f4565b6103586040518060400160405280600581526020017f776964746800000000000000000000000000000000000000000000000000000081525061035360a0610433565b6103f4565b61039b6040518060400160405280600681526020017f6865696768740000000000000000000000000000000000000000000000000000815250610353600a610433565b6040516020016103af9594939291906106ff565b60408051601f198184030181526020830190915260008252906105a7565b6040516020016103de92919061076a565b6040516020818303038152906040529050919050565b6060828260405160200161040992919061083b565b604051602081830303815290604052905092915050565b6060816040516020016103de9190610890565b60608160000361045a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610484578061046e816108f8565b915061047d9050600a83610911565b915061045e565b60008167ffffffffffffffff81111561049f5761049f610933565b6040519080825280601f01601f1916602001820160405280156104c9576020820181803683370190505b509050815b851561056e576104df600182610949565b905060006104ee600a88610911565b6104f990600a610960565b6105039088610949565b61050e90603061097f565b905060008160f81b90508084848151811061052b5761052b6109a4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610565600a89610911565b975050506104ce565b50949350505050565b60606105a0604051806040016040528060048152602001631d195e1d60e21b81525084846105cc565b9392505050565b60606105a0604051806040016040528060048152602001631c9958dd60e21b81525084845b6060838383866040516020016105e594939291906109ba565b60405160208183030381529060405290509392505050565b60005b83811015610618578181015183820152602001610600565b83811115610627576000848401525b50505050565b602081526000825180602084015261064c8160408501602087016105fd565b601f01601f19169190910160400192915050565b60006020828403121561067257600080fd5b5035919050565b6000855161068b818460208a016105fd565b85519083019061069f818360208a016105fd565b85519101906106b28183602089016105fd565b84519101906106c58183602088016105fd565b019695505050505050565b600083516106e28184602088016105fd565b8351908301906106f68183602088016105fd565b01949350505050565b60008651610711818460208b016105fd565b865190830190610725818360208b016105fd565b8651910190610738818360208a016105fd565b855191019061074b8183602089016105fd565b845191019061075e8183602088016105fd565b01979650505050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222077696474683d2233303022206865696768743d223330302260208201527f207374796c653d226261636b67726f756e643a23303030223e000000000000006040820152600083516107ee8160598501602088016105fd565b8351908301906108058160598401602088016105fd565b7f3c2f7376673e000000000000000000000000000000000000000000000000000060599290910191820152605f01949350505050565b6000835161084d8184602088016105fd565b603d60f81b908301908152601160f91b600182015283516108758160028401602088016105fd565b61011160f51b60029290910191820152600401949350505050565b7f3c215b43444154415b00000000000000000000000000000000000000000000008152600082516108c88160098501602087016105fd565b622eae9f60e91b6009939091019283015250600c01919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161090a5761090a6108e2565b5060010190565b60008261092e57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b60008282101561095b5761095b6108e2565b500390565b600081600019048311821515161561097a5761097a6108e2565b500290565b600060ff821660ff84168060ff0382111561099c5761099c6108e2565b019392505050565b634e487b7160e01b600052603260045260246000fd5b600f60fa1b8152600085516109d6816001850160208a016105fd565b600160fd1b60019184019182015285516109f7816002840160208a016105fd565b808201915050601f60f91b8060028301528551610a1b816003850160208a016105fd565b613c2f60f01b600393909101928301528451610a3e8160058501602089016105fd565b6005920191820152600601969550505050505056fea164736f6c634300080d000a";

type RendererConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RendererConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Renderer__factory extends ContractFactory {
  constructor(...args: RendererConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Renderer> {
    return super.deploy(overrides || {}) as Promise<Renderer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Renderer {
    return super.attach(address) as Renderer;
  }
  override connect(signer: Signer): Renderer__factory {
    return super.connect(signer) as Renderer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RendererInterface {
    return new utils.Interface(_abi) as RendererInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Renderer {
    return new Contract(address, _abi, signerOrProvider) as Renderer;
  }
}
